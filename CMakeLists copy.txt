cmake_minimum_required(VERSION 3.16)
project(libcherry)

# Setup
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/modules")
set(GCC_COVERAGE_COMPILE_FLAGS "")

if(NOT MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS} -fPIC")
endif()

# Find Vulkan on the system
find_package(Vulkan REQUIRED)
include_directories(${Vulkan_INCLUDE_DIRS})

# Add libraries
add_subdirectory(lib/glm)
add_subdirectory(lib/imgui)
add_subdirectory(lib/spdlog)
add_subdirectory(lib/stb-image)
add_subdirectory(lib/sdl2)
# CEF setup (this must be after creating the cherry target)
if(CHERRY_CEF)
    # Ensure CEF library is correctly built or link directly
    add_subdirectory(lib/cef-project)
endif()

# Add source files
file(
    GLOB_RECURSE
    CHERRY_SRC
    CONFIGURE_DEPENDS
    "${PROJECT_SOURCE_DIR}/platform/*.h" "${PROJECT_SOURCE_DIR}/platform/*.hpp" "${PROJECT_SOURCE_DIR}/platform/*.cpp"
    "${PROJECT_SOURCE_DIR}/src/*.h" "${PROJECT_SOURCE_DIR}/src/*.hpp" "${PROJECT_SOURCE_DIR}/src/*.cpp"
    "${PROJECT_SOURCE_DIR}/components/*.h" "${PROJECT_SOURCE_DIR}/components/*.hpp" "${PROJECT_SOURCE_DIR}/components/*.cpp"
    "${PROJECT_SOURCE_DIR}/kit/*.h" "${PROJECT_SOURCE_DIR}/kit/*.hpp" "${PROJECT_SOURCE_DIR}/kit/*.cpp"
)

# Create cherry as a shared library (create it first before linking or including)
add_library(cherry SHARED ${CHERRY_SRC})

# Linking with other libraries
target_link_libraries(cherry PRIVATE Vulkan::Vulkan)
target_link_libraries(cherry PRIVATE SDL2)
target_link_libraries(cherry PRIVATE imgui)
target_link_libraries(cherry PRIVATE glm)
target_link_libraries(cherry PRIVATE stbimage)
target_link_libraries(cherry PUBLIC spdlog)

# Include directories for Vulkan, stb_image, and project sources
target_include_directories(cherry PUBLIC ${Vulkan_INCLUDE_DIRS})
target_include_directories(cherry PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/src")
target_include_directories(cherry PUBLIC "${PROJECT_SOURCE_DIR}/lib/stb_image")


# CEF setup (this must be after creating the cherry target)
if(CHERRY_CEF)
# Détecter dynamiquement le dossier CEF binaire
file(GLOB CEF_BINARY_DIRS "${PROJECT_SOURCE_DIR}/lib/cef-project/third_party/cef/cef_binary_*")
list(GET CEF_BINARY_DIRS 0 CEF_BINARY_DIR)

if(NOT CEF_BINARY_DIR)
    message(FATAL_ERROR "CEF binary directory not found in ${PROJECT_SOURCE_DIR}/lib/cef-project/third_party/cef/")
endif()

message(STATUS "Using CEF binary directory: ${CEF_BINARY_DIR}")

# Chemins pour les fichiers d'en-tête et les bibliothèques de CEF
set(CEF_INCLUDE_DIRS "${CEF_BINARY_DIR}/include")
set(CEF_LIBRARIES "${CEF_BINARY_DIR}/Release/libcef.so")

# Ajouter les répertoires d'inclusion pour CEF
target_include_directories(cherry PRIVATE ${CEF_INCLUDE_DIRS})

# Lier les bibliothèques de CEF
target_link_libraries(cherry PRIVATE ${CEF_LIBRARIES})

# Copier les ressources nécessaires
file(GLOB CEF_RESOURCES "${CEF_BINARY_DIR}/Resources/*")
file(COPY ${CEF_RESOURCES} DESTINATION "${CMAKE_BINARY_DIR}/Resources")
endif()
